# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import numpy as np
import sounddevice as sd
import pyaudio
import matplotlib.pyplot as plt
import subprocess
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import sys
from pathlib import Path
from datetime import datetime
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

OUTPUT_PATH = Path(__file__).parent.parent
ASSETS_PATH = OUTPUT_PATH / "build" / "assets" / "frame0"

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()
window.geometry("1536x864")
window.configure(bg="#FFFFFF")
# IDs para cancelaci칩n de after()
after_id_principal = None
after_id_diag = None

## Ventana Diagnostico ##
def mostrar_diagnostico():
    MIC_ID_1 = 3
    MIC_ID_2 = 1
    CHUNK = 1024
    RATE = 44100
    BUFFER_SIZE = CHUNK * 100
    AMPLIFICACION_VISUAL = 5
    p = pyaudio.PyAudio()

    stream1 = p.open(format=pyaudio.paInt16,
                    channels=1,
                    rate=RATE,
                    input=True,
                    input_device_index=MIC_ID_1,
                    frames_per_buffer=CHUNK)
    
    stream2 = p.open(format=pyaudio.paInt16,
                     channels=1,
                     rate=RATE,
                     input=True,
                     input_device_index=MIC_ID_2,
                     frames_per_buffer=CHUNK)
    


    from datetime import datetime

    DIAG_ASSETS_PATH = OUTPUT_PATH / "Diag" / "build" / "assets" / "frame0"
    def diag_assets(path: str) -> Path:
        return DIAG_ASSETS_PATH / Path(path)

    capa_diag = Canvas(window, bg="#FFFFFF", height=864, width=1536, bd=0, highlightthickness=0, relief="ridge")
    capa_diag.place(x=0, y=0)
    capa_diag.create_rectangle(12.0, 0.0, 1548.0, 864.0, fill="#FFFFFF", outline="")

    image_1 = PhotoImage(file=diag_assets("image_1.png"))
    capa_diag.image_1 = image_1
    capa_diag.create_image(152.0, 143.0, image=image_1)

    boton_volver_img = PhotoImage(file=diag_assets("button_1.png"))
    capa_diag.boton_volver_img = boton_volver_img

    # Variables de control
    detener_graficas = {'estado': False}

    # Variables globales para destrucci칩n segura
    global canvas_graf_widget, canvas_fft_widget

    def cerrar_diagnostico():
        detener_graficas['estado'] = True
        if after_id_diag:
            window.after_cancel(after_id_diag)
        capa_diag.destroy()
        canvas_graf_widget.destroy()
        canvas_graf_widget2.destroy()
        canvas_fft_widget.destroy()

    boton_volver = Button(capa_diag, image=boton_volver_img, borderwidth=0, highlightthickness=0,
                          command=cerrar_diagnostico, relief="flat")
    boton_volver.place(x=1278.0, y=70.0, width=149.0, height=149.0)

    image_2 = PhotoImage(file=diag_assets("image_2.png"))
    capa_diag.image_2 = image_2
    capa_diag.create_image(398.0, 144.0, image=image_2)

    texto_hora_diag = capa_diag.create_text(
        398.0, 100.0, anchor="n", text="00:00", fill="#FFFFFF", font=("Inter Bold", 72 * -1)
    )
    #FFT1
    image_5 = PhotoImage(file=diag_assets("image_5.png"))
    capa_diag.image_5 = image_5
    capa_diag.create_image(650.0, 703.0, image=image_5)
    #FFT2
    image_7 = PhotoImage(file=diag_assets("image_7.png"))
    capa_diag.image_7 = image_7
    capa_diag.create_image(850.0, 460.0, image=image_7)

    image_3 = PhotoImage(file=diag_assets("image_3.png"))
    capa_diag.image_3 = image_3
    capa_diag.create_image(315.0, 538.0, image=image_3)

    # Cargar todas las variantes de image_4
    image_4_default = PhotoImage(file=diag_assets("image_4.png"))
    image_4_freq2 = PhotoImage(file=diag_assets("2.png"))
    image_4_freq3 = PhotoImage(file=diag_assets("3.png"))
    image_4_freq4 = PhotoImage(file=diag_assets("4.png"))

    capa_diag.image_4_actual = image_4_default
    image_4_id = capa_diag.create_image(750.0, 176.0, image=image_4_default)

    

    image_6 = PhotoImage(file=diag_assets("image_6.png"))
    capa_diag.image_6 = image_6
    capa_diag.create_image(1190.0, 538.0, image=image_6)

    


    # Par치metros de audio
    DURACION = 0.05
    FS = 44100
    FRAMES = int(DURACION * FS)
    BUFFER_SIZE = FRAMES * 100
    AMPLIFICACION_VISUAL = 5

    # Gr치fico de amplitud
    fig, ax = plt.subplots(figsize=(2.5, 6.0), dpi=100, facecolor='black')
    buffer_audio = np.zeros(BUFFER_SIZE)
    line, = ax.plot(buffer_audio, np.arange(BUFFER_SIZE), color='orange')
    ax.set_facecolor('black')
    ax.set_xlim(-0.5, 0.5)
    ax.set_ylim(0, BUFFER_SIZE)
    ax.invert_yaxis()
    ax.axis('off')

    canvas_graf = FigureCanvasTkAgg(fig, master=capa_diag)
    canvas_graf_widget = canvas_graf.get_tk_widget()
    canvas_graf_widget.place(x=110, y=270, width=400, height=520)

    # Gr치fico FFT
    fig_fft, ax_fft = plt.subplots(figsize=(6.0, 2.0), dpi=100, facecolor='#E6E6E6')
    freqs = np.fft.rfftfreq(FRAMES, 1 / FS)
    espectro = np.zeros(len(freqs))
    line_fft, = ax_fft.plot(freqs, espectro, color='orange')
    ax_fft.set_facecolor('#E6E6E6')
    ax_fft.set_xlim(freqs[0], freqs[-1])
    ax_fft.set_ylim(0, 1.0)
    ax_fft.axis('off')
    fig_fft.subplots_adjust(left=0, right=1, top=1, bottom=0)

    canvas_fft = FigureCanvasTkAgg(fig_fft, master=capa_diag)
    canvas_fft_widget = canvas_fft.get_tk_widget()
    canvas_fft_widget.place(x=600, y=623, width=300, height=160)

    texto_frec = capa_diag.create_text(
        735.0, 800.0,
        text="Frecuencia dominante: --- Hz",
        fill="black",
        font=("Arial", 18)
    )


    # === NUEVA FFT PARA AUDIO2 ===
    fig_fft2, ax_fft2 = plt.subplots(figsize=(4.0, 2.0), dpi=100, facecolor='#E6E6E6')
    freqs2 = np.fft.rfftfreq(FRAMES, 1 / FS)
    espectro2 = np.zeros(len(freqs2))
    line_fft2, = ax_fft2.plot(freqs2, espectro2, color='green')
    ax_fft2.set_facecolor('#E6E6E6')
    ax_fft2.set_xlim(freqs2[0], freqs2[-1])
    ax_fft2.set_ylim(0, 1.0)
    ax_fft2.axis('off')
    fig_fft2.subplots_adjust(left=0, right=1, top=1, bottom=0)

    canvas_fft2 = FigureCanvasTkAgg(fig_fft2, master=capa_diag)
    canvas_fft_widget2 = canvas_fft2.get_tk_widget()
    canvas_fft_widget2.place(x=600, y=380, width=300, height=160)






    ##BARRIDO #2
    fig2, ax2 = plt.subplots(figsize=(2.5, 6.0), dpi=100, facecolor='black')
    buffer_audio_2 = np.zeros(BUFFER_SIZE)
    line2, = ax2.plot(buffer_audio_2, np.arange(BUFFER_SIZE), color='green')
    ax2.set_facecolor('black')
    ax2.set_xlim(-0.5, 0.5)
    ax2.set_ylim(0, BUFFER_SIZE)
    ax2.invert_yaxis()
    ax2.axis('off')

    canvas_graf2 = FigureCanvasTkAgg(fig2, master=capa_diag)
    canvas_graf_widget2 = canvas_graf2.get_tk_widget()
    canvas_graf_widget2.place(x=990, y=270, width=400, height=520)

    def actualizar_grafico_audio():
        if detener_graficas['estado']:
            return
        try:
            data = np.frombuffer(stream1.read(CHUNK, exception_on_overflow=False), dtype=np.int16)
            audio = data.astype(np.float32) / 32768.0 * AMPLIFICACION_VISUAL
            data2 = np.frombuffer(stream2.read(CHUNK, exception_on_overflow=False), dtype=np.int16)
            audio2 = data2.astype(np.float32) / 32768.0 * AMPLIFICACION_VISUAL
            

            nonlocal buffer_audio
            buffer_audio = np.roll(buffer_audio, -CHUNK)
            buffer_audio[-CHUNK:] = audio
            line.set_xdata(buffer_audio)
            line.set_ydata(np.arange(BUFFER_SIZE))  # eje Y vertical invertido
            canvas_graf.draw()
            nonlocal buffer_audio_2
            buffer_audio_2 = np.roll(buffer_audio_2, -CHUNK)
            buffer_audio_2[-CHUNK:] = audio2
            line2.set_xdata(buffer_audio_2)
            line2.set_ydata(np.arange(BUFFER_SIZE))
            canvas_graf2.draw()

            # Calcular FFT
            fft = np.abs(np.fft.rfft(audio))
            fft = fft / np.max(fft) if np.max(fft) != 0 else fft

            freqs_local = np.fft.rfftfreq(len(audio), d=1 / RATE)  # 游녣 asegura que longitud de X e Y coincidan

             # FFT de audio2
            fft2 = np.abs(np.fft.rfft(audio2))
            fft2 = fft2 / np.max(fft2) if np.max(fft2) != 0 else fft2
            freqs_local2 = np.fft.rfftfreq(len(audio2), d=1 / RATE)  # 游녣 asegura que longitud de X e Y coincidan

            # Asignar datos FFT
            line_fft.set_xdata(freqs_local)
            line_fft.set_ydata(fft)
            canvas_fft.draw()

            # Asignar datos FFT audio2
            line_fft2.set_xdata(freqs_local2)
            line_fft2.set_ydata(fft2)
            canvas_fft2.draw()

            # Frecuencia dominante
            indice_max = np.argmax(fft)
            frecuencia_dominante = int(freqs_local[indice_max])
            capa_diag.itemconfig(texto_frec, text=f"Frecuencia dominante: {frecuencia_dominante} Hz")

            # Imagen seg칰n frecuencia
            nueva_imagen = image_4_default
            if frecuencia_dominante >= 3000:
                nueva_imagen = image_4_freq4
            elif frecuencia_dominante >= 2000:
                nueva_imagen = image_4_freq3
            elif frecuencia_dominante >= 1000:
                nueva_imagen = image_4_freq2

            if nueva_imagen != capa_diag.image_4_actual:
                capa_diag.itemconfig(image_4_id, image=nueva_imagen)
                capa_diag.image_4_actual = nueva_imagen

        except Exception as e:
            print("Error PyAudio:", e)

        window.after(50, actualizar_grafico_audio)


    def actualizar_hora_diag():
        global after_id_diag
        if detener_graficas['estado']:
            return
        hora_actual = datetime.now().strftime("%H:%M")
        capa_diag.itemconfig(texto_hora_diag, text=hora_actual)
        after_id_diag = window.after(1000, actualizar_hora_diag)

    actualizar_grafico_audio()
    actualizar_hora_diag()

    

## MENU PRINCIPAL ##
canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=864,
    width=1536,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)
canvas.place(x=0, y=0)
canvas.create_rectangle(12.0, 0.0, 1548.0, 864.0, fill="#FFFFFF", outline="")

image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(676.0, 144.0, image=image_image_1)

image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(152.0, 143.0, image=image_image_2)

canvas.create_text(
    78.0,
    243.0,
    anchor="nw",
    text="Bienvenido",
    fill="#000000",
    font=("Inter Bold", 72 * -1)
)

boton_diagnostico_img = PhotoImage(file=relative_to_assets("button_1.png"))
boton_diagnostico = Button(
    image=boton_diagnostico_img,
    borderwidth=0,
    highlightthickness=0,
    command=mostrar_diagnostico,
    relief="flat"
)
boton_diagnostico.place(x=78.0, y=357.0, width=431.0, height=438.0)

boton_base_datos_img = PhotoImage(file=relative_to_assets("button_2.png"))
def abrir_base_datos():
    ruta_base_datos = OUTPUT_PATH / "Base de datos" / "build" / "gui.py"
    subprocess.Popen(["python", ruta_base_datos], shell=True)
boton_base_datos = Button(
    image=boton_base_datos_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: abrir_base_datos(),
    relief="flat"
)
boton_base_datos.place(x=540.0, y=357.0, width=431.0, height=438.0)

boton_ajustes_img = PhotoImage(file=relative_to_assets("button_3.png"))
boton_ajustes = Button(
    image=boton_ajustes_img,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("Ajustes clickeado"),
    relief="flat"
)
boton_ajustes.place(x=1002.0, y=357.0, width=431.0, height=438.0)

image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(1279.0, 144.0, image=image_image_3)

texto_hora = canvas.create_text(
    1279.0,
    100.0,
    anchor="n",
    text="00:00",
    fill="#FFFFFF",
    font=("Inter Bold", 72 * -1)
)

canvas.create_rectangle(
    485.0, 282.0, 1427.0, 292.0,
    fill="#000000", outline=""
)

window.resizable(False, False)

def actualizar_hora():
    global after_id_principal
    hora_actual = datetime.now().strftime("%H:%M")
    canvas.itemconfig(texto_hora, text=hora_actual)
    after_id_principal = window.after(1000, actualizar_hora)

def on_closing():
    if after_id_principal:
        window.after_cancel(after_id_principal)
    if after_id_diag:
        window.after_cancel(after_id_diag)
        
    window.destroy()
    sys.exit()

window.protocol("WM_DELETE_WINDOW", on_closing)
actualizar_hora()
window.mainloop()
